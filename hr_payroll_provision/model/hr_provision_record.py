from odoo import fields, models, api, _


class HrProvisionRecord(models.Model):
    _name = 'hr.x.provision.record'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _description = 'Provision for XIII and XIV in payroll'

    name = fields.Char("Name", required=True,
                       default=lambda self: self.env["ir.sequence"].next_by_code("hr.x.provision.sequence")
                                            or _("New"), help="Autogenerated code sequence.")
    contract_id = fields.Many2one("hr.contract", "Contract", readonly=True, required=True,
                                  states={"pending": [("readonly", False)]})
    employee_id = fields.Many2one("hr.employee", "Employee",
                                  related="contract_id.employee_id", store=True)
    company_id = fields.Many2one('res.company', 'Company', index=True, required=True,
                                 default=lambda self: self.env.company, tracking=True)
    provision_date = fields.Date('Date', tracking=True, readonly=True, required=True,
                                 states={"pending": [("readonly", False)]})
    provision_amount = fields.Float('Provision amount', tracking=True, readonly=True, required=True,
                                    states={"pending": [("readonly", False)]})
    provision_type = fields.Selection([('xiii', 'XIII'), ('xiv', 'XIV'), ('rf', 'Reserve funds')], "Type",
                                      tracking=True, required=True, readonly=True,
                                      states={"pending": [("readonly", False)]})
    description = fields.Text("Description", readonly=True,
                              states={"pending": [("readonly", False)]})
    state = fields.Selection([('pending', 'Pending'), ('paid', 'Paid'), ('cancelled', 'Cancelled')], 'State',
                             readonly=True, states={"pending": [("readonly", False)]},
                             default="pending", tracking=True)

    def set_paid(self):
        for record in self:
            record.state = "paid"

    def set_cancelled(self):
        for record in self:
            record.state = "cancelled"


class HrContract(models.Model):
    _inherit = "hr.contract"
    _description = "contract extension to show provisions"

    @api.depends("provision_xiii_ids", "provision_xiv_ids")
    def _get_pending_provision(self):
        for record in self:
            record.pending_provision_xiii = sum(record.provision_xiii_ids.filtered(lambda x: x.state in ["pending"]).mapped("provision_amount"))
            record.pending_provision_xiv = sum(record.provision_xiv_ids.filtered(lambda x: x.state in ["pending"]).mapped("provision_amount"))

    provision_xiii_ids = fields.One2many("hr.x.provision.record", "contract_id", "Provisions XIII",
                                         readonly=True, tracking=True,
                                         domain=lambda self: [('provision_type', 'in', ['xiii']),('state', 'in', ['pending'])])
    pending_provision_xiii = fields.Float("Pending provision XIII", compute="_get_pending_provision", tracking=True)

    provision_xiv_ids = fields.One2many("hr.x.provision.record", "contract_id", "Provisions XIV",
                                        readonly=True, tracking=True,
                                        domain=lambda self: [('provision_type', 'in', ['xiv']),('state', 'in', ['pending'])])
    pending_provision_xiv = fields.Float("Pending provision XIV", compute="_get_pending_provision", tracking=True)

    @api.model
    def get_pending_provision_xiii(self):
        provisions = self.env["hr.x.provision.record"].search([
            "&","&",("state", "in", ["pending"]), ("provision_type", "in", ["xiii"]),
            ("employee_id", "=", self.employee_id.id)])
        return provisions or False

    @api.model
    def get_pending_provision_xiii_amount(self):
        provisions = self.env["hr.x.provision.record"].search([
            "&","&",("state", "in", ["pending"]), ("provision_type", "in", ["xiii"]),
            ("employee_id", "=", self.employee_id.id)])
        if provisions:
            amount = sum(provisions.mapped("provision_amount"))
        else:
            amount = 0.00
        return amount

    @api.model
    def get_pending_provision_xiv(self):
        provisions = self.env["hr.x.provision.record"].search([
            "&","&",("state", "in", ["pending"]), ("provision_type", "in", ["xiv"]),
            ("employee_id", "=", self.employee_id.id)])
        return provisions

    @api.model
    def get_pending_provision_xiv_amount(self):
        provisions = self.env["hr.x.provision.record"].search([
            "&","&",("state", "in", ["pending"]), ("provision_type", "in", ["xiv"]),
            ("employee_id", "=", self.employee_id.id)])
        if provisions:
            amount = sum(provisions.mapped("provision_amount"))
        else:
            amount = 0.00
        return amount

    @api.model
    def create_provision_xiii(self, amount, date, description):
        for record in self:
            prov = {
                "provision_type": "xiii",
                "state": "pending",
                "provision_amount": amount,
                "provision_date": date,
                "contract_id": record.id,
                "description": description,
            }
            provisions = self.env["hr.x.provision.record"].create(prov)
        pass

    @api.model
    def create_provision_xiv(self, amount, date, description):
        for record in self:
            prov = {
                "provision_type": "xiv",
                "state": "pending",
                "provision_amount": amount,
                "provision_date": date,
                "contract_id": record.id,
                "description": description,

            }
            provisions = self.env["hr.x.provision.record"].create(prov)
        pass
